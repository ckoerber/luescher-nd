import sys
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.lines as lines

from luescher_nd.plotting.styles import setup
from luescher_nd.plotting.styles import EXPORT_OPTIONS
from luescher_nd.plotting.styles import LINE_STYLE
from luescher_nd.plotting.styles import MARKERS
from luescher_nd.plotting.styles import finalize

# here is data for a/L = .1 in x, S(x) pairs

#aL_0p1_disp4 = np.array([-5.03514375483627, -0.295842318101740, 0.159267114625110, \
#                          -0.295842318101761, 1.52100098021908, -0.29584231810174, \
#                          3.48260157918018, -0.29584231810174, 4.53137891135805, \
#                          -0.2958423181017, 7.81727337073249, -0.2958423181017])

aL_0p1_disp10=np.array([-3.90505389128550, -10.00000000000000, 0.0438495457588377, \
                        -10.00000000000000, 1.18625142834327, -10.0000000000000, \
                        2.37483750292840, -10.0000000000000, 3.29043288754347, \
                        -10.000000000000, 4.15173988929673, -10.00000000000, \
                        5.44816327317604, -10.000000000002, 6.95087854457407, \
                        -10.000000000000, 8.24115633850945, -10.000000000000, \
                        9.49938048143277, -10.000000000000, 10.5249858462279, \
                        -10.00000000000, 11.6869974637930, -10.000000000000, \
                        12.3056450819817, -10.000000000000, 13.3907564489452, \
                        -10.00000000000, 15.4601064937053, -10.000000000000, \
                        16.1479288365874, -10.00000000000])

aL_0p1_disp20=np.array([-3.03691205492099, -10.00000000000000, 0.0434449062291362, \
                        -10.00000000000002, 1.17925315976486, -10.0000000000000, \
                        2.35266245254168, -10.0000000000000, 3.26309552130719, \
                        -10.000000000000, 4.13741042247552, -10.000000000000, \
                        5.41813427589304, -10.000000000000, 6.81940508688403, \
                        -10.000000000000, 8.20802652605157, -10.000000000000, \
                        9.45012622493420, -10.000000000000, 10.4635169215517, \
                        -10.000000000000, 11.5910055587403, -10.000000000000, \
                        12.2244140514770, -10.00000000000, 13.3325381194801, \
                        -10.00000000000, 15.1740933430342, -10.000000000000, \
                        16.0989712896959, -10.00000000000])

aL_0p1_disp40=np.array([-2.75559917892582, -10.00000000000001, 0.0432452529266942, \
                        -10.00000000000000, 1.17602079449776, -10.0000000000018, \
                        2.34274809758303, -10.000000000000, 3.25156880708037, \
                        -10.000000000000, 4.13149637975373, -10.000000000000, \
                        5.40498860227930, -10.000000000000, 6.76695850965872, \
                        -10.000000000000, 8.19569021760310, -10.0000000000, \
                        9.43010210037178, -10.00000000000, 10.4385921521494, \
                        -10.000000000000, 11.5510217353101, -10.00000000000, \
                        12.1988856016498, -10.00000000000, 13.3118640829575, \
                        -10.0000000000, 15.0713903289142, -10.00000000000, \
                        16.0874003632745, -10.00000000000])

#aL_0p1_spher4 = np.array([-5.03514375483627, -0.514531679761698, 0.159267114625110, \
#                          -0.262961034655034, 1.52100098021908, -0.13211161294406, \
#                          3.48260157918018, 0.46367759982174, 4.53137891135805, \
#                          0.3922971725318, 7.81727337073249, 1.950302735127])

aL_0p1_spher10=np.array([-3.90505389128550, -12.4163, 0.0438495457588377, -9.86034, \
                         1.18625142834327, -9.08389, 2.37483750292840, -8.25619, \
                         3.29043288754347, -7.60382, 4.15173988929673, -6.97763, \
                         5.44816327317604, -6.0106, 6.95087854457407, -4.84946, \
                         8.24115633850945, -3.81419, 9.49938048143277, -2.76656, \
                         10.5249858462279, -1.88168, 11.6869974637930, -0.841588, \
                         12.3056450819817, -0.269922, 13.3907564489452, 0.766287, \
                         15.4601064937053, 2.88139, 16.1479288365874, 3.63279])

aL_0p1_spher20=np.array([-3.03691205492099, -10.9494, 0.0434449062291362, -9.93018, \
                         1.17925315976486, -9.55052, 2.35266245254168, -9.15607, \
                         3.26309552130719, -8.84843, 4.13741042247552, -8.55168, \
                         5.41813427589304, -8.11463, 6.81940508688403, -7.63315, \
                         8.20802652605157, -7.15257, 9.45012622493420, -6.71973, \
                         10.4635169215517, -6.36448, 11.5910055587403, -5.96695, \
                         12.2244140514770, -5.74256, 13.3325381194801, -5.34813, \
                         15.1740933430342, -4.68728, 16.0989712896959, -4.3528])

aL_0p1_spher40=np.array([-2.75559917892582, -10.4299, 0.0432452529266942, -9.96511, \
                         1.17602079449776, -9.77655, 2.34274809758303, -9.58207, \
                         3.25156880708037, -9.43038, 4.13149637975373, -9.28336, \
                         5.40498860227930, -9.07031, 6.76695850965872, -8.84208, \
                         8.19569021760310, -8.60226, 9.43010210037178, -8.39472, \
                         10.4385921521494, -8.22493, 11.5510217353101, -8.03739, \
                         12.1988856016498, -7.92806, 13.3118640829575, -7.74002, \
                         15.0713903289142, -7.44222, 16.0874003632745, -7.26996])

# here is data for a/L = 1/(2pi) in x, S(x) pairs (this corresponds to the scale invariant case)


aL_0_disp10 = np.array([-0.0947291894775145, 0., 0.507463847856138, 0., \
                         1.48405497933645, 0, 2.68113340728856, 0, \
                         3.63106699228029, 0, 4.31933460744611, 0, \
                         5.59611542350210, 0, 7.44556486030557, 0, \
                         8.38446453048552, 0, 9.62336394603478, 0, \
                         10.6516165732655, 0, 11.8225221443989, 0, \
                         12.4922012840426, 0, 13.4942263857826, 0, \
                         15.7469445676235, 0, 16.2659318087187, 0])

aL_0_disp20 = np.array([-0.0953057494463900, 0., 0.489908826850093, 0., \
                         1.46231349416089, 0., 2.65411514774438, 0., \
                         3.58295152824874, 0, 4.28236815883168, 0, \
                         5.56590449985940, 0, 7.31832435626358, 0, \
                         8.32972617953113, 0, 9.57608117754355, 0, \
                         10.5984388195656, 0, 11.7639377079961, 0, \
                         12.3884971269830, 0, 13.4307683797656, 0, \
                         15.5475626956663, 0, 16.1661295196925, 0])

aL_0_disp40 = np.array([-0.0956022791950411, 0., 0.481345349496402, 0., \
                        1.45186019015902, 0., 2.64063192253419, 0.,3.55965660565397, 0., 0.481345349496388, 0., \
                         1.45186019015902, 0., 2.64063192253419, 0., \
                         3.55965660565397, 0., 4.26644928503518, 0., \
                         5.55171666861818, 0., 7.25717849820772, 0, \
                         8.30779936480653, 0, 9.55503629384192, 0, \
                         10.5743546164859, 0, 11.7336729586397, 0, \
                         12.3473409792705, 0, 13.4060134649914, 0, \
                         15.4508281033077, 0, 16.1407991737549, 0])

aL_0p159_spher4 = np.array([-1.19691440297149, -0.055919560141400, 0.246908892218331, \
                             0.039687872471503, 1.60459830887379, 0.17421181724580, \
                             3.66614948674492, 1.0276180218320, 4.62864583128496, \
                             0.9851343727485, 7.88008634761937, 3.156622822778])

aL_0_spher10 = np.array([-0.0947291894775145, 0.0466795, 0.507463847856138, 0.452585, \
                         1.48405497933645, 1.12153, 2.68113340728856, 1.96057, \
                         3.63106699228029, 2.64234, 4.31933460744611, 3.14568, \
                         5.59611542350210, 4.10173, 7.44556486030557, 5.54305, \
                         8.38446453048552, 6.30316, 9.62336394603478, 7.33887, \
                         10.6516165732655, 8.22965, 11.8225221443989, 9.28253, \
                         12.4922012840426, 9.90509, 13.4942263857826, 10.8675, \
                         15.7469445676235, 13.1914, 16.2659318087187, 13.7645])

aL_0_spher20 = np.array([-0.0953057494463900, 0.0235797, 0.489908826850093, 0.218802, \
                         1.46231349416089, 0.544423, 2.65411514774438, 0.945639, \
                         3.58295152824874, 1.25998, 4.28236815883168, 1.49764, \
                         5.56590449985940, 1.93598, 7.31832435626358, 2.53912, \
                         8.32972617953113, 2.88971, 9.57608117754355, 3.32432, \
                         10.5984388195656, 3.68296, 11.7639377079961, 4.09423, \
                         12.3884971269830, 4.31569, 13.4307683797656, 4.68695, \
                         15.5475626956663, 5.44758, 16.1661295196925, 5.67156])

aL_0_spher40 = np.array([-0.0956022791950411, 0.0117953, 0.481345349496402, 0.107786, \
                        1.45186019015902, 0.269407, 2.64063192253419, 0.467634, 3.55965660565397, 0.621076, 0.481345349496388, 0.107786, \
                         1.45186019015902, 0.269407, 2.64063192253419, 0.467634, \
                         3.55965660565397, 0.621076, 4.26644928503518, 0.739199, \
                         5.55171666861818, 0.954262, 7.25717849820772, 1.24016, \
                         8.30779936480653, 1.41657, 9.55503629384192, 1.6263, \
                         10.5743546164859, 1.79794, 11.7336729586397, 1.99342, \
                         12.3473409792705, 2.09701, 13.4060134649914, 2.2759, \
                         15.4508281033077, 2.62209, 16.1407991737549, 2.7391])


# and here is spherical luescher S2/pi^2 in (x, S2(x)/pi^2) pairs

s3 = np.array([-5., -14.0496, -4.95, -13.9792, -4.9, -13.9084, -4.85, \
-13.8373, -4.8, -13.7658, -4.75, -13.6939, -4.7, -13.6216, \
-4.65, -13.549, -4.6, -13.4759, -4.55, -13.4025, -4.5, \
-13.3286, -4.45, -13.2544, -4.4, -13.1797, -4.35, -13.1046, \
-4.3, -13.0291, -4.25, -12.9531, -4.2, -12.8767, -4.15, \
-12.7998, -4.1, -12.7225, -4.05, -12.6446, -4., -12.5663, \
-3.95, -12.4876, -3.9, -12.4083, -3.85, -12.3285, -3.8, \
-12.2482, -3.75, -12.1673, -3.7, -12.0859, -3.65, -12.004, \
-3.6, -11.9215, -3.55, -11.8384, -3.5, -11.7547, -3.45, \
-11.6704, -3.4, -11.5856, -3.35, -11.5001, -3.3, -11.4139, \
-3.25, -11.3271, -3.2, -11.2396, -3.15, -11.1515, -3.1, \
-11.0626, -3.05, -10.973, -3., -10.8827, -2.95, -10.7916, \
-2.9, -10.6997, -2.85, -10.6071, -2.8, -10.5136, -2.75, \
-10.4193, -2.7, -10.3241, -2.65, -10.2281, -2.6, -10.1311, \
-2.55, -10.0332, -2.5, -9.93429, -2.45, -9.83441, -2.4, \
-9.7335, -2.35, -9.63154, -2.3, -9.52847, -2.25, -9.42428, \
-2.2, -9.31892, -2.15, -9.21234, -2.1, -9.10451, -2.05, \
-8.99538, -2., -8.88491, -1.95, -8.77303, -1.9, -8.65969, \
-1.85, -8.54484, -1.8, -8.42841, -1.75, -8.31033, -1.7, \
-8.19053, -1.65, -8.06892, -1.6, -7.94543, -1.55, -7.81996, \
-1.5, -7.6924, -1.45, -7.56265, -1.4, -7.43058, -1.35, \
-7.29605, -1.3, -7.15893, -1.25, -7.01904, -1.2, -6.87619, \
-1.15, -6.73019, -1.1, -6.58079, -1.05, -6.42773, -1., \
-6.2707, -0.95, -6.10934, -0.9, -5.94324, -0.85, -5.7719, \
-0.8, -5.59474, -0.75, -5.41103, -0.7, -5.2199, -0.65, \
-5.02023, -0.6, -4.81059, -0.55, -4.5891, -0.5, -4.3532, \
-0.45, -4.09932, -0.4, -3.82223, -0.35, -3.51388, -0.3, \
-3.16112, -0.25, -2.74061, -0.2, -2.20619, -0.15, -1.45097, \
               -0.1, -0.155719, -0.05, 3.2722, -.01,28.9413, 0., np.nan,.01,-34.6154, 0.05, -8.9334, \
0.1, -5.46497, 0.15, -4.10116, 0.2, -3.24764, 0.25, -2.58269, \
0.3, -1.99584, 0.35, -1.43597, 0.4, -0.872929, 0.45, \
-0.284058, 0.5, 0.35212, 0.55, 1.06033, 0.6, 1.87342, 0.65, \
2.83988, 0.7, 4.03798, 0.75, 5.60636, 0.8, 7.81992, 0.85, \
11.3174, 0.9, 18.0107, 0.95, 37.4515, 1., np.nan, 1.05, \
-38.2019, 1.1, -18.698, 1.15, -11.8977, 1.2, -8.24654, 1.25, \
-5.82795, 1.3, -3.99694, 1.35, -2.46981, 1.4, -1.09573, 1.45, \
0.220566, 1.5, 1.55174, 1.55, 2.9658, 1.6, 4.54046, 1.65, \
6.38064, 1.7, 8.64813, 1.75, 11.6235, 1.8, 15.8587, 1.85, \
22.6318, 1.9, 35.7669, 1.95, 74.3665, 2., np.nan, 2.05, \
-77.6043, 2.1, -38.9843, 2.15, -25.8147, 2.2, -18.9925, 2.25, \
-14.6928, 2.3, -11.6361, 2.35, -9.26891, 2.4, -7.30815, 2.45, \
-5.58879, 2.5, -4.00132, 2.55, -2.46136, 2.6, -0.890976, \
2.65, 0.797985, 2.7, 2.7265, 2.75, 5.09137, 2.8, 8.26786, \
2.85, 13.1139, 2.9, 22.1834, 2.95, 48.2152, 3., np.nan, \
3.05, -52.5316, 3.1, -26.5115, 3.15, -17.4623, 3.2, -12.6466, \
3.25, -9.51266, 3.3, -7.20559, 3.35, -5.35446, 3.4, -3.76852, \
3.45, -2.33536, 3.5, -0.979184, 3.55, 0.359766, 3.6, 1.73811, \
3.65, 3.2212, 3.7, 4.89982, 3.75, 6.92218, 3.8, 9.5709, \
3.85, 13.4911, 3.9, 20.6003, 3.95, 40.4553, 4., np.nan, \
4.05, -34.3555, 4.1, -14.4131, 4.15, -7.15563, 4.2, -3.02201, \
4.25, -0.088208, 4.3, 2.30004, 4.35, 4.4381, 4.4, 6.49188, \
4.45, 8.57683, 4.5, 10.7934, 4.55, 13.2493, 4.6, 16.0812, \
4.65, 19.4862, 4.7, 23.7791, 4.75, 29.5148, 4.8, 37.7922, \
4.85, 51.1649, 4.9, 77.2787, 4.95, 154.337, 5., np.nan, \
5.05, -149.841, 5.1, -72.6955, 5.15, -46.4342, 5.2, -32.8486, \
5.25, -24.2857, 5.3, -18.1823, 5.35, -13.4251, 5.4, -9.43988, \
5.45, -5.8847, 5.5, -2.52367, 5.55, 0.836644, 5.6, 4.38964, \
5.65, 8.3711, 5.7, 13.1228, 5.75, 19.2187, 5.8, 27.7718, \
5.85, 41.3448, 5.9, 67.5901, 5.95, 144.715, 6., np.nan, \
6.05, -159.518, 6.1, -82.4986, 6.15, -56.4326, 6.2, -43.1191, \
6.25, -34.9152, 6.3, -29.2714, 6.35, -25.0934, 6.4, -21.8332, \
6.45, -19.1853, 6.5, -16.9656, 6.55, -15.0564, 6.6, -13.3785, \
6.65, -11.8765, 6.7, -10.5103, 6.75, -9.24981, 6.8, -8.07203, \
6.85, -6.95859, 6.9, -5.89453, 6.95, -4.86725, 7., -3.86577, \
7.05, -2.88015, 7.1, -1.90103, 7.15, -0.919182, 7.2, \
0.0749438, 7.25, 1.09167, 7.3, 2.14269, 7.35, 3.24189, 7.4, \
4.4064, 7.45, 5.65833, 7.5, 7.02732, 7.55, 8.55485, 7.6, \
10.3018, 7.65, 12.3621, 7.7, 14.8905, 7.75, 18.1635, 7.8, \
22.7303, 7.85, 29.8685, 7.9, 43.4025, 7.95, 82.4363, 8., \
np.nan, 8.05, -68.5477, 8.1, -29.3661, 8.15, -15.5809, 8.2, \
-8.08025, 8.25, -3.02784, 8.3, 0.870632, 8.35, 4.18814, 8.4, \
7.23363, 8.45, 10.2076, 8.5, 13.2691, 8.55, 16.5739, 8.6, \
20.3068, 8.65, 24.7238, 8.7, 30.2248, 8.75, 37.5082, 8.8, \
47.9513, 8.85, 64.7482, 8.9, 97.4578, 8.95, 193.836, 9., \
np.nan, 9.05, -186.313, 9.1, -89.8625, 9.15, -57.0303, 9.2, \
-40.0571, 9.25, -29.3792, 9.3, -21.7952, 9.35, -15.9181, 9.4, \
-11.0361, 9.45, -6.73013, 9.5, -2.71771, 9.55, 1.22489, 9.6, \
5.3118, 9.65, 9.79375, 9.7, 15.0238, 9.75, 21.585, 9.8, \
30.5977, 9.85, 44.6315, 9.9, 71.345, 9.95, 148.952, 10., \
               np.nan])

# here is dispersion Luescher for N=4:

s3d = np.array([-5., -10.9561, -4.95, -10.9163, -4.9, -10.8762, -4.85, \
-10.8358, -4.8, -10.795, -4.75, -10.7538, -4.7, -10.7124, \
-4.65, -10.6705, -4.6, -10.6283, -4.55, -10.5857, -4.5, \
-10.5428, -4.45, -10.4994, -4.4, -10.4557, -4.35, -10.4116, \
-4.3, -10.367, -4.25, -10.3221, -4.2, -10.2767, -4.15, \
-10.2309, -4.1, -10.1846, -4.05, -10.138, -4., -10.0908, \
-3.95, -10.0432, -3.9, -9.99512, -3.85, -9.94655, -3.8, \
-9.89749, -3.75, -9.84793, -3.7, -9.79786, -3.65, -9.74726, \
-3.6, -9.69612, -3.55, -9.64444, -3.5, -9.59219, -3.45, \
-9.53938, -3.4, -9.48598, -3.35, -9.43198, -3.3, -9.37736, \
-3.25, -9.32212, -3.2, -9.26623, -3.15, -9.20969, -3.1, \
-9.15247, -3.05, -9.09456, -3., -9.03594, -2.95, -8.97659, \
-2.9, -8.91649, -2.85, -8.85563, -2.8, -8.79398, -2.75, \
-8.73151, -2.7, -8.66821, -2.65, -8.60405, -2.6, -8.53901, \
-2.55, -8.47306, -2.5, -8.40617, -2.45, -8.33831, -2.4, \
-8.26945, -2.35, -8.19956, -2.3, -8.12861, -2.25, -8.05655, \
-2.2, -7.98335, -2.15, -7.90897, -2.1, -7.83337, -2.05, \
-7.7565, -2., -7.67831, -1.95, -7.59874, -1.9, -7.51775, \
-1.85, -7.43528, -1.8, -7.35125, -1.75, -7.26561, -1.7, \
-7.17827, -1.65, -7.08916, -1.6, -6.9982, -1.55, -6.90528, \
-1.5, -6.81031, -1.45, -6.71318, -1.4, -6.61376, -1.35, \
-6.51191, -1.3, -6.4075, -1.25, -6.30035, -1.2, -6.19028, \
-1.15, -6.07708, -1.1, -5.96052, -1.05, -5.84033, -1., \
-5.71619, -0.95, -5.58776, -0.9, -5.45462, -0.85, -5.31628, \
-0.8, -5.17214, -0.75, -5.0215, -0.7, -4.86345, -0.65, \
-4.6969, -0.6, -4.52041, -0.55, -4.33211, -0.5, -4.12943, \
-0.45, -3.9088, -0.4, -3.66499, -0.35, -3.38996, -0.3, \
-3.07055, -0.25, -2.68342, -0.2, -2.18242, -0.15, -1.46064, \
                -0.1, -0.198867, -0.05, 3.19554,-.01,28.8378, 0., np.nan,.01,-34.7323, 0.05, \
-9.07719, 0.1, -5.64238, 0.15, -4.3122, 0.2, -3.49237, 0.25, \
-2.86113, 0.3, -2.30803, 0.35, -1.78194, 0.4, -1.25272, 0.45, \
-0.697698, 0.5, -0.0954046, 0.55, 0.578887, 0.6, 1.35802, \
0.65, 2.29049, 0.7, 3.45458, 0.75, 4.98889, 0.8, 7.16836, \
0.85, 10.6317, 0.9, 17.2908, 0.95, 36.6975, 1., \
np.nan, 1.05, -39.0244, 1.1, -19.5548, 1.15, \
-12.7889, 1.2, -9.1721, 1.25, -6.78792, 1.3, -4.99136, 1.35, \
-3.49871, 1.4, -2.15916, 1.45, -0.877411, 1.5, 0.419169, \
1.55, 1.7986, 1.6, 3.3386, 1.65, 5.14408, 1.7, 7.37683, \
1.75, 10.3175, 1.8, 14.5178, 1.85, 21.2561, 1.9, 34.3563, \
1.95, 72.9209, 2., np.nan, 2.05, -79.1198, 2.1, \
-40.5348, 2.15, -27.4003, 2.2, -20.6132, 2.25, -16.3487, 2.3, \
-13.3272, 2.35, -10.9952, 2.4, -9.06971, 2.45, -7.38566, 2.5, \
-5.83353, 2.55, -4.32895, 2.6, -2.79399, 2.65, -1.14049, 2.7, \
0.752531, 2.75, 3.08186, 2.8, 6.22277, 2.85, 11.0332, 2.9, \
20.0671, 2.95, 46.0631, 3., np.nan, 3.05, -54.7551, \
3.1, -28.7709, 3.15, -19.7575, 3.2, -14.9777, 3.25, -11.8797, \
3.3, -9.60866, 3.35, -7.79354, 3.4, -6.24366, 3.45, -4.84661, \
3.5, -3.52658, 3.55, -2.22381, 3.6, -0.881699, 3.65, \
0.565128, 3.7, 2.20743, 3.75, 4.19345, 3.8, 6.80577, 3.85, \
10.6895, 3.9, 17.7622, 3.95, 37.5807, 4., np.nan, \
4.05, -37.3032, 4.1, -17.3975, 4.15, -10.1767, 4.2, -6.07984, \
4.25, -3.18281, 4.3, -0.831387, 4.35, 1.26981, 4.4, 3.28667, \
4.45, 5.33466, 4.5, 7.51422, 4.55, 9.93304, 4.6, 12.7279, \
4.65, 16.0958, 4.7, 20.3515, 4.75, 26.0499, 4.8, 34.2901, \
4.85, 47.6255, 4.9, 73.7019, 4.95, 150.723, 5., \
np.nan, 5.05, -153.53, 5.1, -76.4222, 5.15, -50.1985, \
5.2, -36.6505, 5.25, -28.1253, 5.3, -22.0596, 5.35, -17.3402, \
5.4, -13.3928, 5.45, -9.87549, 5.5, -6.55237, 5.55, -3.23003, \
5.6, 0.284953, 5.65, 4.22835, 5.7, 8.94191, 5.75, 14.9997, \
5.8, 23.5145, 5.85, 37.0493, 5.9, 63.2563, 5.95, 140.343, \
6., np.nan, 6.05, -163.968, 6.1, -86.9861, 6.15, \
-60.9586, 6.2, -47.6838, 6.25, -39.5185, 6.3, -33.9134, 6.35, \
-29.7742, 6.4, -26.5528, 6.45, -23.9437, 6.5, -21.763, 6.55, \
-19.8927, 6.6, -18.2538, 6.65, -16.7908, 6.7, -15.4637, 6.75, \
-14.2425, 6.8, -13.1039, 6.85, -12.0297, 6.9, -11.005, 6.95, \
-10.0171, 7., -9.05505, 7.05, -8.10892, 7.1, -7.16934, 7.15, \
-6.22708, 7.2, -5.2726, 7.25, -4.29558, 7.3, -3.28431, 7.35, \
-2.22492, 7.4, -1.10027, 7.45, 0.111735, 7.5, 1.44074, 7.55, \
2.92825, 7.6, 4.63508, 7.65, 6.65523, 7.7, 9.14349, 7.75, \
12.3762, 7.8, 16.9027, 7.85, 24.0005, 7.9, 37.4941, 7.95, \
76.4875, 8., np.nan, 8.05, -74.5777, 8.1, -35.4368, \
8.15, -21.6923, 8.2, -14.2325, 8.25, -9.22088, 8.3, -5.3633, \
8.35, -2.08675, 8.4, 0.917722, 8.45, 3.85061, 8.5, 6.87096, \
8.55, 10.1345, 8.6, 13.8262, 8.65, 18.2019, 8.7, 23.6616, \
8.75, 30.9035, 8.8, 41.3051, 8.85, 58.0604, 8.9, 90.7283, \
8.95, 187.064, 9., np.nan, 9.05, -193.167, 9.1, \
-96.7591, 9.15, -63.9688, 9.2, -47.0376, 9.25, -36.4018, 9.3, \
-28.8599, 9.35, -23.0251, 9.4, -18.1853, 9.45, -13.9217, 9.5, \
-9.95167, 9.55, -6.05154, 9.6, -2.00716, 9.65, 2.43218, 9.7, \
7.61956, 9.75, 14.1381, 9.8, 23.108, 9.85, 37.0989, 9.9, \
63.7693, 9.95, 141.333, 10., np.nan])

# these are the functions for the corrections

def func10(x):
    return (-8.91363291758515127269+9.25986138777860 + \
        x*(16.532315959761669643893 - 14.4234798298591) + \
        x*x*(8.4019239748275399931461 - 8.38095669349515))/np.pi

def func20(x):
    return (-8.91363291758515127269 + 9.08747321556999 + \
        x*(16.532315959761669643893 - 15.4853107114944) + \
        x*x*(8.4019239748275399931461 - 8.39938622894022))/np.pi

def func40(x):
    return (-8.91363291758515127269 + 9.00064439734243 + \
        x*(16.532315959761669643893 - 16.0097506821086) + \
        x*x*(8.4019239748275399931461 - 8.40160941170844))/np.pi

N = [10, 20, 40]
x_lim=[-5.0,10.]
free_x=[0,1,2,3,4,5,6,8,9,10]

correction = {
    10: func10,
    20: func20,
    40: func40,
}

color = {
    10: 'red',
    20: 'green',
    40: 'blue',
}

marker = {
    10: 's',
    20: 'd',
    40: 'h',
}

aL_0p1_disp = {
    10: aL_0p1_disp10,
    20: aL_0p1_disp20,
    40: aL_0p1_disp40,
}

aL_0p1_spher = {
    10: aL_0p1_spher10,
    20: aL_0p1_spher20,
    40: aL_0p1_spher40,
}

aL_0_disp = {
    10: aL_0_disp10,
    20: aL_0_disp20,
    40: aL_0_disp40,
}

aL_0_spher = {
    10: aL_0_spher10,
    20: aL_0_spher20,
    40: aL_0_spher40,
}

setup()
fig, axs = plt.subplots(2,1,tight_layout=True)

# Plot of the zeta functions
axs[1].set_xlim(x_lim)
axs[1].set_ylim([-15,15])
axs[1].set_xlabel(r'$x$')
axs[1].set_ylabel(r'$\frac{1}{\pi}S_3$')
axs[1].set_xticks(free_x)
axs[1].grid(axis='both')

# axs[1].plot(s2d[0::2],  s2d[1::2],  '--',   color=color[4], alpha=1.0, label=r'$\boxplus\ N=4, n_s=\infty$')
axs[1].plot(s3[0::2],   s3[1::2],   '--',   color='grey',       alpha=0.5,  label=r'$\bigcirc$')
axs[1].plot(s3d[0::2],  s3d[1::2],  '--',   color=color[10],    alpha=1.0,  label=r'$\boxplus\ N=10, n_s=\infty$')
axs[1].legend(frameon=False)

# Spherical zeta
axs[0].plot(s3[0::2],s3[1::2],'--',color='grey',markersize=3,alpha=0.5)

# Analytic lines
x = np.arange(min(x_lim), max(x_lim), 0.1)
for exact in [0.0,-10]:
    # Exact result, no momentum dependence, found with dispersion zeta function.
    axs[0].plot(x, exact+0*x,color='black',linewidth=0.5)

    # Whoops!  You used the spherical zeta, you need the correction.
    for n in N:
        axs[0].plot(x, exact+correction[n](x), '-', color=color[n], linewidth='0.5')

# Data points
for n in N:
    # WARNING: the data variables are all named for the opposite case!
    # non-unitary simulations
    axs[0].plot(aL_0p1_disp[n][0::2],       aL_0p1_disp[n][1::2],   marker=marker[n],    color='black', markersize=4, linestyle="None")
    axs[0].plot(aL_0p1_spher[n][0::2],      aL_0p1_spher[n][1::2],  marker=marker[n],    color=color[n],markersize=4, linestyle="None")
    # unitary simulations
    axs[0].plot(aL_0_disp[n][0::2],     aL_0_disp[n][1::2], marker=marker[n],    color='black', markersize=4, linestyle="None", markerfacecolor="None")
    axs[0].plot(aL_0_spher[n][0::2],    aL_0_spher[n][1::2],marker=marker[n],    color=color[n],markersize=4, linestyle="None", markerfacecolor="None")


axs[0].set_xlim(x_lim)
axs[0].set_ylim([-15,5])
axs[0].set_xticks(free_x)
axs[0].grid(axis='x')
axs[0].set_xlabel(r'$x$')
axs[0].set_ylabel(r'$pL\ \cot\left(\delta_{30}\right)$')

finalize()
fig.savefig("3d.pdf", bbox_inches='tight')
